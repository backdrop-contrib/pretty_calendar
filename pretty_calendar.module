<?php

/**
 * @file
 * Simple nice calendar module that displays the materials by date.
 */

/**
 * Implements hook_menu().
 */
function pretty_calendar_menu() {
  $items = array();
  $items['calendar/%/%/%'] = array(
    'title' => 'All activities for the day',
    'page callback' => 'pretty_calendar_day_nodes',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['calendar_get/%'] = array(
    'title' => 'Calendar',
    'page callback' => 'pretty_calendar_content_loader',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['calendar_links/%/%/%'] = array(
    'title' => 'Calendar',
    'page callback' => 'pretty_calendar_links_loader',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'pretty_calendar_node_list',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -50,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function pretty_calendar_theme() {
  $hooks = array(
    'pretty_calendar' => array(
      'template' => 'templates/pretty-calendar',
      'variables' => array(
        'daynames' => NULL,
        'content' => NULL,
        'month_prev' => NULL,
        'month_next' => NULL,
        'month_name' => NULL,
      ),
    ),
    'pretty_calendar_week' => array(
      'template' => 'templates/pretty-calendar-week',
      'variables' => array(
        'days' => NULL,
        'delta' => NULL,
      ),
    ),
    'pretty_calendar_day' => array(
      'template' => 'templates/pretty-calendar-day',
      'variables' => array(
        'number' => NULL,
        'date' => NULL,
        'delta' => NULL,
        'class' => NULL,
        'count' => NULL,
        'using_tooltip' => NULL,
        'is_empty' => NULL,
      ),
    ),
  );
  return $hooks;
}

/**
 * Implements hook_block_info().
 */
function pretty_calendar_block_info() {
  $blocks['calendar']['info'] = t('Calendar');
  $blocks['calendar']['description'] = t('Simple calendar generated by the Pretty Calendar module.');
  $blocks['calendar']['properties']['administrative'] = TRUE;
  return $blocks;
}

/**
 * Implements hook_config_info().
 */
function pretty_calendar_config_info() {
  $prefixes['pretty_calendar.settings'] = array(
    'label' => t('Pretty Calendar settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_block_configure().
 */
function pretty_calendar_block_configure($delta = '') {
  $config = config('pretty_calendar.settings');
  $form['page_title'] = array(
    '#type' => 'textfield',
    '#size' => 128,
    '#maxlength' => 128,
    '#title' => t('Calendar page title'),
    '#default_value' => $config->get('page_title'),
    '#description' => t('Choose a title for page that will display all calendar nodes.'),
  );

  $node_types = node_type_get_types();
  $node_type_options = array();
  $node_type_options[''] = t('All node types');
  foreach ($node_types as $node_type) {
    $node_type_options[$node_type->type] = $node_type->name;
  }

  // Search themes.
  $themes = array(
    'basis' => 'Basis for Backdrop',
    'standard' => 'Standard (legacy)',
    'round' => 'Rounded (legacy)',
    'vista_198' => 'Vista 198px (legacy)',
    'gridy_182' => 'Gridy 182px (legacy)',
  );
  $form['theme'] = array(
    '#type' => 'select',
    '#options' => $themes,
    '#title' => t('Theme'),
    '#default_value' => $config->get('theme'),
    '#description' => t('Select calendar appearance'),
  );

  $form['node_type'] = array(
    '#type' => 'checkboxes',
    '#options' => $node_type_options,
    '#multiple' => TRUE,
    '#title' => t('Node type'),
    '#default_value' => explode(',', $config->get('node_type')),
    '#description' => t('Select node type.'),
  );
  $form['node_invert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Invert selection.'),
    '#default_value' => $config->get('node_invert'),
  );

  // Search date fields.
  $fields = field_info_fields();
  $fields_options[''] = t('Node creation date');

  $date_module = (module_exists('date') || module_exists('repeating_dates'));
  if ($date_module) {
    $field_desc = t('Select the field that contains the date of the event. By default, content will be selected by date created.');
    foreach ($fields as $field_type => $field_data) {
      if ($field_data['module'] == 'date' || $field_data['module'] == 'repeating_dates') {
        $fields_options[$field_data['module'] . '.' . $field_type] = $field_type;
      }
    }
    if (count($fields_options) == 1) {
      $field_desc = t('There are no custom date fields.');
    }
  }
  else {
    $field_desc = t('No supported date field module is enabled.');
  }

  $form['field_date'] = array(
    '#type' => 'select',
    '#options' => $fields_options,
    '#disabled' => !$date_module,
    '#title' => t('Date field'),
    '#default_value' => $config->get('date_module') . '.' . $config->get('field_name'),
    '#description' => $field_desc,
  );
  $system_formats = system_get_date_formats();
  $format_options = array();
  foreach ($system_formats as $date_format) {
    $format_options[$date_format['name']] = $date_format['label'] . ' (' . date($date_format['pattern']) . ')';

  }
  $form['date_format_listing'] = array(
    '#type' => 'select',
    '#options' => $format_options,
    '#title' => t('Format to use for dates on listings page'),
    '#default_value' => $config->get('date_format_listing'),
  );
  $form['upcoming_days'] = array(
    '#type' => 'number',
    '#title' => t('Display additional upcoming days'),
    '#description' => t('How many additional upcoming days would you like to show underneath the daily listing, if any? (up to 6 additional days to show a full week)'),
    '#size' => 2,
    '#min' => 0,
    '#max' => 6,
    '#default_value' => $config->get('upcoming_days'),
  );
  $form['title_words'] = array(
    '#type' => 'textfield',
    '#size' => 64,
    '#maxlength' => 64,
    '#title' => t('Event headings'),
    '#default_value' => $config->get('title_words'),
    '#description' => t('Choose a name for the events that will be displayed when hovering on a date. For example, "12 events". Enter comma-separated words for plurals (for example, "event, events").'),
  );
  $form['preload_tooltips'] = array(
    '#type' => 'radios',
    '#options' => array(
      '+' => t('Display links to events'),
      '-' => t('Display the count of events'),
    ),
    '#title' => t('Tooltip type'),
    '#default_value' => $config->get('preload_tooltips'),
  );
  $form['tooltip_count'] = array(
    '#type' => 'select',
    '#options' => backdrop_map_assoc(array(1, 2, 3, 4, 5, 8, 10, 15, 20)),
    '#title' => t('Number of links in the tooltip'),
    '#default_value' => $config->get('tooltip_count'),
    '#description' => t('Specify the number of links in the tooltip.'),
    '#states' => array(
      'invisible' => array(
        ':input[name="block_settings[preload_tooltips]"]' => array('value' => '-'),
      ),
    ),
  );
  $form['separate_languages'] = array(
    '#type' => 'checkbox',
    '#title' => t('Separate nodes by language'),
    '#default_value' => $config->get('separate_languages'),
    '#description' => t('If checked nodes will be selected in the language in which they were created.'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function pretty_calendar_block_save($delta = '', $edit = array()) {
  $config = config('pretty_calendar.settings');
  $config->set('page_title', $edit['page_title']);
  $config->set('theme', $edit['theme']);
  $config->set('node_type', implode(",", $edit['node_type']));
  $config->set('node_invert', $edit['node_invert']);
  if (!empty($edit['field_date'])) {
    $field_date = explode('.', $edit['field_date']);
    $config->set('date_module', $field_date[0]);
    $config->set('field_name', $field_date[1]);
    if ($field_date[0] == 'date') {
      $config->set('column_name_start', $field_date[1] . '_value');
      $config->set('column_name_end', $field_date[1] . '_value2');
    }
    else if ($field_date[0] == 'repeating_dates') {
      $config->set('column_name_start', $field_date[1] . '_dtstart');
      $config->set('column_name_end', $field_date[1] . '_dtend');
    }
  }
  $config->set('date_format_listing', $edit['date_format_listing']);
  $config->set('upcoming_days', $edit['upcoming_days']);
  $config->set('title_words', $edit['title_words']);
  $config->set('preload_tooltips', $edit['preload_tooltips']);
  $config->set('tooltip_count', $edit['tooltip_count']);
  $config->set('separate_languages', $edit['separate_languages']);
  $config->save();
}

/**
 * Implements hook_block_view().
 */
function pretty_calendar_block_view($delta = '') {
  $config = config('pretty_calendar.settings');
  $theme = $config->get('theme');

  $m = date('m');
  $y = date('Y');

  if (arg(0) == 'calendar') {
    if (arg(1) > 0) {
      $y = (int) arg(1);
    }
    if (arg(2) > 0) {
      $m = (int) arg(2);
    }
  }

  if (arg(0) == 'node' && arg(1) > 0) {
    $types = explode(',', $config->get('node_type'));
    $use_all = in_array('', $types);
    $node = node_load(arg(1));
    if ($use_all || (in_array($node->type, $types) && !$use_all)) {
      $m = date('m', $node->created);
      $y = date('Y', $node->created);
    }
  }

  $path = backdrop_get_path('module', 'pretty_calendar');
  $block['subject'] = t('Calendar');
  $block['content'] = array(
    '#markup' => pretty_calendar_block_content(mktime(0, 0, 0, $m, 1, $y)),
    '#attached' => array(
      'js' => array($path . '/js/pretty_calendar.js'),
      'css' => array($path . '/themes/' . $theme . '/calendar.css'),
    ),
  );
  return $block;
}

/**
 * Rendering calendar block content.
 *
 * @param int $month
 *   Timestamp of selected month.
 *
 * @return string
 *   Rendered block content.
 */
function pretty_calendar_block_content($month) {
  $config = config('pretty_calendar.settings');
  global $language;

  // Format month array.
  // Get month timestamp.
  $month = mktime(0, 0, 0, date('m', $month), 12, date('Y', $month));
  // Get number of days in the given month.
  $dayofmonth = date('t', $month);
  $day_count = 1;
  $num = 0;
  // Fill first week.
  // Days of previous month in beginning of the week will be skipped.
  for ($i = 0; $i < 7; $i++) {
    // Get mumeric representation of the day of the week.
    $dayofweek = date('w', mktime(0, 0, 0, date('m', $month), $day_count, date('Y', $month)));
    $dayofweek = $dayofweek - 1;
    if ($dayofweek == -1) {
      $dayofweek = 6;
    }
    if ($dayofweek == $i) {
      $week[$num][$i] = $day_count;
      $day_count++;
    }
    else {
      // Leave blank value of the day in previous month.
      $week[$num][$i] = "";
    }
  }
  // Fill other weeks.
  while (TRUE) {
    $num++;
    for ($i = 0; $i < 7; $i++) {
      $week[$num][$i] = $day_count;
      $day_count++;
      if ($day_count > $dayofmonth) {
        break;
      }
    }
    if ($day_count > $dayofmonth) {
      break;
    }
  }

  // Get names of the days.
  $daynames = array();
  for ($i = 1; $i <= 7; $i++) {
    $daynames[] = format_date(mktime(0, 0, 0, 1, $i, 2001), 'custom', 'D', NULL, $language->langcode);
  }

  // Get month name. Add context to t() for extended translation.
  $month_name = t(format_date($month, 'custom', 'F', NULL, 'en'), array(), array('context' => 'Nominative')) . ' ' . date('Y', $month);
  $field_name = $config->get('field_name');
  $column_name_start = $config->get('column_name_start');
  $node_type = $config->get('node_type');
  $use_tooltips = $config->get('preload_tooltips');
  $use_tooltips = $use_tooltips == '-' ? FALSE : TRUE;

  $output = '';

  // Get all nides for selected month.
  $day_nids = array();
  for ($i = 1; $i < 32; $i++) {
    $day_nids[$i] = 0;
  }
  $nids = pretty_calendar_select_month_nodes($month);
  if (isset($nids['error'])) {
    $output .= '<div class="messages error">' . t('database error') . '</div>';
  }
  else {
    foreach ($nids as $row) {
      if (isset($row->$column_name_start)) {
        $day_nids[(int) date('d', strtotime($row->$column_name_start))]++;
      }
      elseif (isset($row->created)) {
        $day_nids[(int) date('d', $row->created)]++;
      }
    }
  }

  // Format theme array.
  $days = array();
  for ($i = 0; $i < count($week); $i++) {
    for ($j = 0; $j < 7; $j++) {
      $day = !empty($week[$i][$j]) ? $week[$i][$j] : '';
      $cls = '';
      // Define cell classes.
      if ($j > 4) {
        $cls = 'pretty-calendar-weekend';
      }
      else {
        $cls = 'pretty-calendar-day';
      }
      if ($j == 6) {
        $cls .= ' pretty-calendar-last';
      }
      $now = time() + _pretty_calendar_get_timezone_offset();
      if ($day == date('d', $now) && date('m.Y', $now) == date('m.Y', $month)) {
        $cls .= ' pretty-calendar-today';
      }

      // YYYY/MM/DD format for links.
      $days_date = '';
      if (!empty($day)) {
        $days_date = date('Y/m', $month) . '/' . ($day > 9 ? $day : '0' . $day);
      }
      $days[] = theme('pretty_calendar_day', array(
        'number' => $day,
        'date' => $days_date,
        'delta' => $j + 1,
        'class' => $cls,
        'count' => !empty($day) ? $day_nids[$day] : 0,
        'using_tooltip' => $use_tooltips,
        'is_empty' => empty($day),
      ));
    }
    $output .= theme('pretty_calendar_week', array(
      'days' => $days,
      'delta' => $i + 1,
    ));
    $days = array();
  }

  return theme('pretty_calendar', array(
    'daynames' => $daynames,
    'content' => $output,
    'month_prev' => mktime(0, 0, 0, date('m', $month) - 1, 12, date('Y', $month)),
    'month_next' => mktime(0, 0, 0, date('m', $month) + 1, 12, date('Y', $month)),
    'month_name' => $month_name,
  ));
}

/**
 * AJAX response for calendar navigation.
 *
 * @param int $month
 *   Timestamp of selected month.
 *
 * @return string
 *   Rendered block content.
 */
function pretty_calendar_content_loader($month) {
  header('Content-Type: text/html; charset=utf-8');
  print pretty_calendar_block_content((int) $month);
  backdrop_exit();
}

/**
 * AJAX response for preloading node links.
 *
 * @param int $year
 *   Selected year in "YYYY" format.
 *
 * @param int $month
 *   Selected month in "MM" format.
 *
 * @param int $day
 *   Selected day in "DD" format.
 *
 * @return string
 *   Rendered list of links.
 */
function pretty_calendar_links_loader($year, $month, $day) {
  header('Content-Type: text/html; charset=utf-8');

  $date = mktime(0, 0, 0, (int) $month, (int) $day, (int) $year);
  $result = pretty_calendar_select_nodes($date, TRUE);
  if (count($result) == 0) {
    print 'Error';
    backdrop_exit();
  }

  $tooltip_count = config_get('pretty_calendar.settings', 'tooltip_count');
  $counter = 0;
  $list = array();
  foreach ($result as $row) {
    $list['items'][] = l($row->title, 'node/' . $row->nid);
    $counter++;
    if ($counter >= $tooltip_count) {
      break;
    }
  }
  print theme('item_list', $list);
  $more_links = count($result) - $tooltip_count;
  if ($more_links > 0) {
    $links = pretty_calendar_plural($more_links);
    print '<p class="tooltip_summary">' .
      l(t('more @count', array('@count' => $links)), "calendar/$year/$month/$day") .
      '</p>';
  }

  backdrop_exit();
}

/**
 * Extended plural values.
 *
 * To translate names we should set some values or leave "story,stories'.
 * Then we can use "1 story", "@count stories", "@count[2] stories" on
 * "/admin/config/regional/translate/translate" page.
 *
 * @param int $count
 *   Number.
 *
 * @return string
 *   Formatted plural value. For example, "17 events".
 */
function pretty_calendar_plural($count) {
  $words = explode(',', config_get('pretty_calendar.settings', 'title_words'));
  if (!isset($words[0]) || !isset($words[1])) {
    $words = explode(',', 'story,stories');
  }
  return format_plural($count, '1 ' . $words[0], '@count ' . $words[1]);
}

/**
 * Select nodes for selected date.
 *
 * @param int $date
 *   Date timestamp.
 *
 * @param bool $links_only
 *   Boolean value. If "TRUE", returned result will be contain pager element.
 *
 * @return array|DatabaseStatementInterface
 *   By dependency of $links_only value, result will be array or query result.
 */
function pretty_calendar_select_nodes($date = 0, $links_only = FALSE) {
  $config = config('pretty_calendar.settings');
  global $language;
  $field_name = $config->get('field_name');
  $column_name_start = $config->get('column_name_start');
  $node_types = explode(',', $config->get('node_type'));

  // Check if field was deleted.
  if (field_info_field($field_name) == '') {
    $field_name = '';
  }

  // Select nodes without date field.
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('n.status', 1);
  // Multilanguage condition.
  if ($config->get('separate_languages')) {
    $select->condition('n.language', $language->langcode);
  }
  // Check date.
  if ($date > 0) {
    $timezone_offset = _pretty_calendar_get_timezone_offset();
    if (empty($field_name)) {
      $select
        ->condition('created', $date, '>=')
        ->condition('created', $date + 86400, '<');
    }
    else {
      $select->distinct();
      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
      $select->fields('fd', array($column_name_start));
      $select->where('DATE(ADDTIME(' . $column_name_start . ', SEC_TO_TIME(' . $timezone_offset . '))) = :date', array(':date' => date('Y-m-d', $date)));
    }
  }
  // Check types.
  if ($node_types[0] != '') {
    if ($config->get('node_invert')) {
      $select->condition('n.type', $node_types, 'NOT IN');
    }
    else {
      $select->condition('n.type', $node_types, 'IN');
    }
  }
  $select->orderBy('n.sticky', 'DESC')
    ->orderBy('n.created', 'DESC');

  if (!$links_only) {
    $select->addTag('node_access');
    return $select->execute()->fetchCol();
  }
  else {
    $select->addTag('node_access');
    $result = array();
    foreach ($select->execute() as $row) {
      $result[] = $row;
    }
    return $result;
  }
}

/**
 * Select all month nodes.
 *
 * @param int $date
 *   Timestamp of selected month.
 *
 * @return array
 *   Nids array for the given month.
 */
function pretty_calendar_select_month_nodes($date = 0) {
  global $language;
  $config = config('pretty_calendar.settings');
  $field_name = $config->get('field_name');
  $column_name_start = $config->get('column_name_start');
  $column_name_end = $config->get('column_name_end');
  $node_types = explode(',', $config->get('node_type'));

  // Check if field was deleted.
  if (field_info_field($field_name) == '') {
    $field_name = '';
  }

  // Select nodes without date field.
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('n.status', 1);
  // Multilanguage condition.
  if ($config->get('separate_languages')) {
    $select->condition('n.language', $language->langcode);
  }
  // Check date.
  if ($date > 0) {
    $timezone_offset = _pretty_calendar_get_timezone_offset();
    if ($field_name == '') {
      $select
        ->condition('created', mktime(0, 0, 0, date('m', $date), 1, date('Y', $date)), '>=')
        ->condition('created', mktime(0, 0, 0, date('m', $date) + 1, 1, date('Y', $date)), '<');
    }
    else if ($config->get('date_module') == 'date') {
      $select->distinct();
      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
      $select->fields('fd', array($column_name_start));
      $select->where('DATE_FORMAT(ADDTIME(fd.' . $column_name_start . ', SEC_TO_TIME(' . $timezone_offset . ')), \'%Y%m\') = :stamp', array(':stamp' => date('Ym', $date)));
    }
    else if ($config->get('date_module') == 'repeating_dates') {
      $select->distinct();
      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
      $select->fields('fd', array($column_name_start));
      $select->condition('fd.' . $column_name_start, mktime(0, 0, 0, date('m', $date + $timezone_offset), 1, date('Y', $date)), '>=');
      $select->condition('fd.' . $column_name_start, mktime(0, 0, 0, date('m', $date + $timezone_offset) + 1, 1, date('Y', $date)), '<');
    }
  }
  // Check types.
  if ($node_types[0] != '') {
    if ($config->get('node_invert')) {
      $select->condition('n.type', $node_types, 'NOT IN');
    }
    else {
      $select->condition('n.type', $node_types, 'IN');
    }
  }
  $select->addTag('node_access');
  $result = array();

  try {
    foreach ($select->execute() as $row) {
      $result[] = $row;
    }
  }
  catch (Exception $e) {
    $result['error'] = $e;
  }

  return $result;
}

/**
 * Display page with selected day nodes.
 *
 * @param int $year
 *   Selected year in "YYYY" format.
 *
 * @param int $month
 *   Selected month in "MM" format.
 *
 * @param int $day
 *   Selected day in "DD" format.
 *
 * @return string
 *   Rendered page content.
 */
function pretty_calendar_day_nodes($year, $month, $day) {
  global $language;
  $output = '';
  $config = config('pretty_calendar.settings');
  $upcoming_days = $config->get('upcoming_days');
  $date_format_listing = $config->get('date_format_listing');
  $count = 0;
  do {
    $date = mktime(0, 0, 0, (int) $month, (int) $day + $count, (int) $year);
    $dateresult = pretty_calendar_node_list($date);
    if ($dateresult) {
      $output .= '<h3>' . format_date($date, $date_format_listing, NULL, NULL, $language->langcode) . '</h3>';
      $output .= $dateresult;
    }
    $count++;
  } while ($count <= $upcoming_days);

  return $output;
}

/**
 * Display page with nodes by date.
 *
 * @param int $date
 *   Timestamp of selected month.
 *
 * @return string
 *   Rendered page content.
 */
function pretty_calendar_node_list($date = 0) {
  backdrop_set_title(config_get('pretty_calendar.settings', 'page_title'));
  $nids = pretty_calendar_select_nodes($date);
  return views_embed_view('pretty_calendar', 'default', implode('+', $nids));
}

/**
 * * Get server timezone offset from UTC.
 */
function _pretty_calendar_get_timezone_offset() {
  date_default_timezone_set('UTC');
  $timezone = config_get('system.date', 'default_timezone');
  $dateTimeZoneUTC = new DateTimeZone("UTC");
  $dateTimeZoneServer = new DateTimeZone($timezone);
  $dateTimeUTC = new DateTime("now", $dateTimeZoneUTC);
  $dateTimeServer = new DateTime("now", $dateTimeZoneServer);

  $timeOffset = $dateTimeZoneServer->getOffset($dateTimeUTC);

  return $timeOffset;
}
